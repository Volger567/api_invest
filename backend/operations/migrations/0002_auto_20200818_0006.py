# Generated by Django 3.0.8 on 2020-08-18 00:06

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0001_initial'),
        ('market', '0003_auto_20200818_0006'),
        ('operations', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='share',
            name='co_owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shares', to='users.CoOwner', verbose_name='Совладелец'),
        ),
        migrations.AddField(
            model_name='share',
            name='operation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shares', to='operations.Operation', verbose_name='Операция'),
        ),
        migrations.AddField(
            model_name='operation',
            name='currency',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='operations.Currency', verbose_name='Валюта'),
        ),
        migrations.AddField(
            model_name='operation',
            name='deal',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='operations', to='market.Deal', verbose_name='Сделка'),
        ),
        migrations.AddField(
            model_name='operation',
            name='instrument',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='operations', to='market.InstrumentType', verbose_name='Ценная бумага'),
        ),
        migrations.AddField(
            model_name='operation',
            name='investment_account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operations', to='users.InvestmentAccount', verbose_name='Инвестиционный счет'),
        ),
        migrations.CreateModel(
            name='CardPurchaseOperation',
            fields=[
            ],
            options={
                'verbose_name': 'Покупка с карты',
                'verbose_name_plural': 'Покупки с карты',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('operations.operation',),
        ),
        migrations.CreateModel(
            name='DividendOperation',
            fields=[
            ],
            options={
                'verbose_name': 'Дивиденды',
                'verbose_name_plural': 'Дивиденды',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('operations.operation',),
        ),
        migrations.CreateModel(
            name='InvestmentAccountPurchaseOperation',
            fields=[
            ],
            options={
                'verbose_name': 'Покупка с ИС',
                'verbose_name_plural': 'Покупки с ИС',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('operations.operation',),
        ),
        migrations.CreateModel(
            name='MarginCommissionOperation',
            fields=[
            ],
            options={
                'verbose_name': 'Комиссия за маржинальную торговлю',
                'verbose_name_plural': 'Комиссии за обслуживание',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('operations.operation',),
        ),
        migrations.CreateModel(
            name='PayInOperation',
            fields=[
            ],
            options={
                'verbose_name': 'Пополнение средств',
                'verbose_name_plural': 'Пополнения средств',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('operations.operation',),
        ),
        migrations.CreateModel(
            name='PayOperation',
            fields=[
            ],
            options={
                'verbose_name': 'Пополнение/Вывод средств',
                'verbose_name_plural': 'Пополнения/Выводы средств',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('operations.operation',),
        ),
        migrations.CreateModel(
            name='PayOutOperation',
            fields=[
            ],
            options={
                'verbose_name': 'Вывод средств',
                'verbose_name_plural': 'Выводы средств',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('operations.operation',),
        ),
        migrations.CreateModel(
            name='PurchaseOperation',
            fields=[
            ],
            options={
                'verbose_name': 'Покупка',
                'verbose_name_plural': 'Покупки',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('operations.operation',),
        ),
        migrations.CreateModel(
            name='SaleOperation',
            fields=[
            ],
            options={
                'verbose_name': 'Продажа',
                'verbose_name_plural': 'Продажи',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('operations.operation',),
        ),
        migrations.CreateModel(
            name='ServiceCommissionOperation',
            fields=[
            ],
            options={
                'verbose_name': 'Комиссия за обслуживание',
                'verbose_name_plural': 'Комиссии за обслуживание',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('operations.operation',),
        ),
        migrations.CreateModel(
            name='TaxBackOperation',
            fields=[
            ],
            options={
                'verbose_name': 'Возврат налога',
                'verbose_name_plural': 'Возвраты налога',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('operations.operation',),
        ),
        migrations.CreateModel(
            name='TaxOperation',
            fields=[
            ],
            options={
                'verbose_name': 'Налог',
                'verbose_name_plural': 'Налоги',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('operations.operation',),
        ),
        migrations.AddConstraint(
            model_name='share',
            constraint=models.UniqueConstraint(fields=('operation', 'co_owner'), name='unique_co_owner_op'),
        ),
        migrations.AddConstraint(
            model_name='operation',
            constraint=models.UniqueConstraint(fields=('investment_account', 'type', 'date'), name='unique_operation'),
        ),
        migrations.AddConstraint(
            model_name='operation',
            constraint=models.UniqueConstraint(condition=models.Q(_id='', _negated=True), fields=('_id',), name='unique_id_$(class)s'),
        ),
        migrations.AddConstraint(
            model_name='operation',
            constraint=models.UniqueConstraint(condition=models.Q(dividend_tax_date__isnull=False), fields=('investment_account', 'type', 'instrument', 'dividend_tax_date'), name='unique_div_tax_date'),
        ),
        migrations.AddConstraint(
            model_name='operation',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('commission', 0), ('deal__isnull', True), ('dividend_tax', 0), ('dividend_tax_date__isnull', True), ('instrument__isnull', True), ('is_margin_call', False), ('payment__gt', 0), ('quantity', 0), ('type__in', ('PayIn',)), models.Q(_id='-1', _negated=True)), models.Q(('commission', 0), ('deal__isnull', True), ('dividend_tax', 0), ('dividend_tax_date__isnull', True), ('instrument__isnull', True), ('is_margin_call', False), ('payment__lt', 0), ('quantity', 0), ('type__in', ('PayOut',)), models.Q(_id='-1', _negated=True)), models.Q(('dividend_tax', 0), ('dividend_tax_date__isnull', True), ('instrument__isnull', False), ('payment__lt', 0), ('quantity__gte', 1), ('type__in', ('Buy',)), models.Q(_id='-1', _negated=True)), models.Q(('dividend_tax', 0), ('dividend_tax_date__isnull', True), ('instrument__isnull', False), ('payment__lt', 0), ('quantity__gte', 1), ('type__in', ('BuyCard',)), models.Q(_id='-1', _negated=True)), models.Q(('dividend_tax', 0), ('dividend_tax_date__isnull', True), ('instrument__isnull', False), ('payment__gt', 0), ('quantity__gte', 1), ('type__in', ('Sell',)), models.Q(_id='-1', _negated=True)), models.Q(('commission', 0), ('dividend_tax__lte', 0), ('instrument__isnull', False), ('is_margin_call', False), ('payment__gt', 0), ('quantity', 0), ('type__in', ('Dividend',)), models.Q(_id='-1', _negated=True)), models.Q(('commission', 0), ('deal__isnull', True), ('dividend_tax', 0), ('dividend_tax_date__isnull', True), ('instrument__isnull', True), ('is_margin_call', False), ('payment__lt', 0), ('quantity', 0), ('type__in', ('ServiceCommission',)), models.Q(_id='-1', _negated=True)), models.Q(('commission', 0), ('deal__isnull', True), ('dividend_tax', 0), ('dividend_tax_date__isnull', True), ('instrument__isnull', True), ('is_margin_call', False), ('payment__lt', 0), ('quantity', 0), ('type__in', ('MarginCommission',)), models.Q(_id='-1', _negated=True)), models.Q(('commission', 0), ('deal__isnull', True), ('dividend_tax', 0), ('dividend_tax_date__isnull', True), ('instrument__isnull', True), ('is_margin_call', False), ('payment__lt', 0), ('quantity', 0), ('type__in', ('Tax',)), models.Q(_id='-1', _negated=True)), models.Q(('commission', 0), ('deal__isnull', True), ('dividend_tax', 0), ('dividend_tax_date__isnull', True), ('instrument__isnull', True), ('is_margin_call', False), ('payment__gt', 0), ('quantity', 0), ('type__in', ('TaxBack',)), models.Q(_id='-1', _negated=True)), ('type', 'Unknown'), _connector='OR'), name='operation_restrict_property_set_by_type'),
        ),
    ]
